================================
💡 Workshop Laravel 11 with Vue 3  💡
================================

⚡ DAY 1
1.Setup Tools
2.What new in Laravel 11
3.Setup Project
4.PostgreSQL/MySQL Connect
5.API Controller & Methods
-------------------------------------------------------
🚀1. การเตรียมเครื่องมือและความพร้อม
💻 XAMPP & PHP 8.2.x
---
php -v

💻 MySQL / MariaDB
---
mysql --version

💻 Node JS 18.x and up
---
node -v
npm -v
ppx -v

💻 Composer
---
composer --version

💻 PostgreSQL 15 and up
---
psql --version

💻 Git
---
git version

💻 VSCode
---
code -v

🚀 2.What new in Laravel 11
---
- การยกเลิกการรองรับ PHP 8.1 เพื่อรองรับเวอร์ชัน PHP ที่ใหม่กว่า
- โครงสร้างแอปพลิเคชันที่กะทัดรัดมากขึ้นโดยลดไฟล์และโค้ดที่ซ้ำซ้อน
- คุณสมบัติ Dumpable Trait ใหม่ที่ช่วยในการดีบั๊ก
- การเปลี่ยนแปลงวิธีการระบุ Model Casts จากพร็อพเพอร์ตี้เป็นวิธีการ
- การรวมการตั้งค่าคอนฟิกจากหลายไฟล์เป็นหนึ่งไฟล์ .env
- การรวมไฟล์ไมเกรชันมาตรฐานเหลือเพียง 2 ไฟล์
- การลบ Console Kernel และย้ายคำสั่ง Artisan มาไว้ใน routes/console.php
- การเปลี่ยนแปลงเกี่ยวกับไฟล์ routes สำหรับ API และ Websockets
- ข้อดีในการอัปเกรดเป็น Laravel 11 เช่น ประสิทธิภาพที่ดีขึ้น, ประสบการณ์ผู้พัฒนาที่ดีขึ้น, การรักษาความปลอดภัย, เทมเพลต Blade ใหม่, ฟีเจอร์ใหม่ๆ

🚀3.Setup Project
---
</> Server Prerequisites to Install Laravel 11

PHP >= 8.2
Ctype PHP Extension
cURL PHP Extension
DOM PHP Extension
Fileinfo PHP Extension
Filter PHP Extension
Hash PHP Extension
Mbstring PHP Extension
OpenSSL PHP Extension
PCRE PHP Extension
PDO PHP Extension
Session PHP Extension
Tokenizer PHP Extension
XML PHP Extension

การติดตั้ง
---
</> ติดตั้งเวอร์ชั่นล่าสุด (11.x)
💻 composer create-project  laravel/laravel  mylaravel11-app 

หมายเหตุ ติดตั้งระบุเลข Version เฉพาะ
💻 composer create-project laravel/laravel:^10.0 mylaravel10-app

</> การรันโปรเจ็กต์
---
💻 php artisan serve
ปกติจะรันอยู่ที่ http://127.0.0.1:8000

หากต้องการ run ที่ port อื่น 
💻php artisan serve  --port=9000

</> Laravel Basic Routing
---

</> Basic Routing
---

Route::get('/', function () {
    return 'Hello World!';
});

Route::get('about', function(){
    return 'My about page';
});

</> Routing with Parameters
---
Route::get('user/{id}', function ($id) {
    return 'User:' . $id;
});

Route::get('posts/{post}/comments/{comment}', function ($postID, $commentID) {
    return 'Post:' . $postID . '<br>Comment:' . $commentID;
});

Route::get('member/{name?}', function ($name = null) {
    return 'Hello' . $name;
});

</> Regular Expression Constraints
---
Route::get('category/{name}', function ($name) {
    return $name;
})->where('name', '[A-Za-z]+');

Route::get('group/{id}', function ($id) {
    return $id;
})->where('id','[0-9]+');

Route::get('product/{id}/{name}', function ($id, $name) {
    return 'Product ID:'.$id.'<br>Product name:'.$name;
})->where(['id' => '[0-9]+', 'name' => '[a-z]+']);

</> Named Routes
---
Route::get('guest/showroom/data/{name?}',function($name=null){
    return'Hello'.$name;
})->name('guestprofile');

Route post,put,delete
---
Route::post('user/profile',function(){
    return'POST';
});

Route::put('user/profile',function(){
    return'PUT';
});

Route::delete('user/profile',function(){
    return'DELETE';
});

</> พื้นฐานการทำงานกับ Controller ใน Laravel 11
---
การสร้าง Controller ใหม่
php artisan make:controller HomeController

</> การเรียกใช้งาน Controller ใน routes (web.php)
---
Method 1:

Route::get(
  'profile’,
  'App\Http\Controllers\HomeController@showprofile’
);

Method 2:

use App\Http\Controllers\HomeController;

Route::get(
  'profile’,
  [HomeController::class,'showprofile’]
);

</> Route Prefixes
---
Route::group(['prefix' => 'admin'], function () {
    Route::get('users', function ()    {
        // Matches The "/admin/users" URL
    });
});

Route::group(['prefix' => 'accounts/{account_id}'], function () {
    Route::get('detail', function ($account_id)    {
        // Matches The accounts/{account_id}/detail URL
    });
});


🚀4.PostgreSQL/MySQL Connect

</> การทำงานกับฐานข้อมูล
---
เชื่อมต่อฐานข้อมูล PostgreSQL
แก้ไขไฟล์ .env
---
# SQLite
# DB_CONNECTION=sqlite

# MySQL
# DB_CONNECTION=mysql
# DB_HOST=127.0.0.1
# DB_PORT=3306
# DB_DATABASE=laravel
# DB_USERNAME=root
# DB_PASSWORD=

# PostgreSQL
DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=samplelaraveldb
DB_USERNAME=postgres
DB_PASSWORD=123456

</> คำสั่ง Running Migrations
---
💻 php artisan migrate

</> สรุปคำสั่ง สร้าง migration และ db:seed พร้อมกัน
---
💻 php artisan migrate:fresh --seed

</> การสร้าง API ใน Laravel 11
---
ติดตั้ง api
---
💻 php artisan install:api

🚀5.API Controller & Methods

</> ทดสอบเขียน api ที่ไฟล์ routes/api.php
---
<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;

// Route::get('/user', function (Request $request) {
//     return $request->user();
// })->middleware('auth:sanctum');

// กำหนดตัวแปร $users
$users = [
    [
        'name' => 'John Doe',
        'email' => 'john@email.com',
    ],
    [
        'name' => 'Jane Doe',
        'email' => 'jane@email.com',
    ]
];

// GET /api/user
Route::get('/user',  function (Request $request) use ($users){
    return $users;
});

// POST /api/user
// Payload: { "name": "John Doe", "email": "john@email.com"}
Route::post('/user', function (Request $request)  use ($users){
    // Retrieve the name and email from the request body payload
    $name = $request->input('name');
    $email = $request->input('email');

    // Add the new user to the users array
    $users[] = [
        'name' => $name,
        'email' => $email,
    ];

    // Return the name and email
    return $users;
});

// PUT /api/user/1
// Payload: { "name": "Jack Doe", "email": "jack@email.com"}
Route::put('/user/{id}', function (Request $request, $id) use ($users) {
    // Retrieve the name and email from the request body payload
    $name = $request->input('name');
    $email = $request->input('email');

    // Update the user with the given id
    $users[$id] = [
        'name' => $name,
        'email' => $email,
    ];

    // Return the name and email
    return $users;
});

// DELETE /api/user/1
Route::delete('/user/{id}', function (Request $request, $id) use ($users) {
    // Remove the user with the given id
    unset($users[$id]);

    // Return the name and email
    return $users;
});


-------------------------------------------------------
⚡ DAY 2
1.Create Laravel Project for Rest API
2.Sanctum package settings
3.API Register, Login, Refresh, Logout
4.Deploy Laravel Project to cloud
-------------------------------------------------------
🚀 1.Create Laravel Project for Rest API

Step 1: สร้างโปรเจ็กต์ใหม่ใน Laravel 11
💻 composer create-project  laravel/laravel laravel11-store-api

Step 2: เปิดเข้า vscode
💻 code laravel11-store-api -r

Step 3: ทดสอบรันโปรเจ็กต์
💻 php artisan serve

Step 4: สร้างฐานข้อมูลใหม่ใน PostgreSQL "laravelstore"
</> CREATE DATABASE laravelstore;

Step 5: แก้ไขไฟล์ .env เพื่อ Connect ฐานข้อมูล PostgreSQL
</>

# PostgreSQL
DB_CONNECTION=pgsql
DB_HOST=127.0.0.1
DB_PORT=5432
DB_DATABASE=laravelstore
DB_USERNAME=postgres
DB_PASSWORD=123456

Step 6: สร้าง migration resource conrtroller and model
💻 php artisan make:model --migration --controller Product --api

จะได้ไฟล์ app/Http/Controllers/ProductController.php เป็นแบบ API

และได้ไฟล์ database/migrations/2024_05_24_100645_create_products_table.php 

Step 7: กำหนดโครงสร้าง migrations ที่ไฟล์ "xxx_create_users_table.php"

public function up(): void
{
        Schema::create('users', function (Blueprint $table) {
            $table->id();
            $table->string('fullname');
            $table->string('username');
            $table->string('email')->unique();
            $table->timestamp('email_verified_at')->nullable();
            $table->string('password');
            $table->string('tel');
            $table->string('avatar')->nullable();
            $table->tinyInteger('role')->default(1);
            $table->rememberToken();
            $table->timestamps();
        });
 }

Step 8: กำหนดโครงสร้าง migrations ที่ไฟล์ "xxx_create_products_table.php"

public function up()
{
        Schema::create('products', function (Blueprint $table) {
            $table->id();
            $table->string('name');
            $table->string('slug');
            $table->string('description')->nullable();
            $table->decimal('price',9, 2); // 2,859,893.50
            $table->string('image')->nullable();
            $table->unsignedBigInteger('user_id')->comment('Created By User');
            $table->foreign('user_id')->references('id')->on('users');
            $table->timestamps();
        });
}


🚀 2.Sanctum package settings

Step 9: ติดตั้ง api routes ใน Laravel 11
💻 php artisan install:api

One new database migration has been published. Would you like to run all pending database migrations? (yes/no) [yes]
ตอบ yes เพื่อทำการ migrate ฐานข้อมูล

จะได้ตารางทั้งหมด 11 ตารางในฐานข้อมูล
cache
cache_locks
failed_jobs
job_batches
jobs
migrations
password_reset_tokens
personal_access_tokens
products
sessions
users

หมายเหตุ หากมีการแก้ไข migration สามารถสั่งอัพรัน migrate ใหม่
💻 php artisan migrate

Step 10: เพิ่ม Laravel\Sanctum\HasApiTokens เข้าไปที่ User model
</> app/Models/User.php

use Laravel\Sanctum\HasApiTokens;

class User extends Authenticatable
{
    use HasApiTokens, HasFactory, Notifiable;

    /**
     * The attributes that are mass assignable.
     *
     * @var array<int, string>
     */
    protected $fillable = [
        'fullname',
        'username',
        'email',
        'email_verified_at',
        'password',
        'tel',
        'avatar',
        'role',
    ];

    /**
     * The attributes that should be hidden for serialization.
     *
     * @var array<int, string>
     */
    protected $hidden = [
        'password',
        'remember_token',
    ];

    /**
     * Get the attributes that should be cast.
     *
     * @return array<string, string>
     */
    protected function casts(): array
    {
        return [
            'email_verified_at' => 'datetime',
            'password' => 'hashed',
        ];
    }

    /**
     * Products Relationship
     */
    public function products()
    {
        return $this->hasMany(Product::class)->orderBy('id', 'desc');
    }
}


Step 11: แก้ไข Product Model ที่ไฟล์ app/Models/Product.php 
</>

<?php

namespace App\Models;

use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;

class Product extends Model
{
    use HasFactory;

    protected $fillable = [
        'name',
        'slug',
        'description',
        'price',
        'image',
        'user_id'
    ];

    /**
     * Relationship to Users
     */
    public function users(){

        // SELECT * 
        // FROM products
        // INNER JOIN users
        // ON products.user_id = users.id;

        return $this->belongsTo('App\Models\User','user_id')->select(['id','fullname','avatar']); 
    }
}

🚀 3.API Register, Login, Refresh Token, Logout

Step 12: สร้าง AuthController.php สำหรับไว้ทำ Register และ Login
💻 php artisan make:controller AuthController --model=User

Step 13: สร้าง Method register และ login ใน src\app\Http\Controllers\AuthController.php
</>

<?php

namespace App\Http\Controllers;

use App\Models\User;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Hash;

class AuthController extends Controller
{
    // Register User
    public function register(Request $request){

        // Validate field
        $fields = $request->validate([
            'fullname' => 'required|string',
            'username' => 'required|string',
            'email'=> 'required|string|unique:users,email',
            'password'=>'required|string|confirmed',
            'tel'=>'required',
            'role'=> 'required|integer'
        ]);

        // Create user
        $user = User::create([
            'fullname' => $fields['fullname'],
            'username' => $fields['username'],
            'email' => $fields['email'],
            'password' => bcrypt($fields['password']), 
            'tel' => $fields['tel'],
            'role' => $fields['role']
        ]);

        $response = [
            'status' => true,
            'message' => "User registered successfully",
            'user' => $user,
        ];

        return response($response, 201);
    }

    // Login User
    public function login(Request $request) {

        // Validate field
        $fields = $request->validate([
            'email'=> 'required|string',
            'password'=>'required|string'
        ]);

        // Check email
        $user = User::where('email', $fields['email'])->first();

        // Check password
        if(!$user || !Hash::check($fields['password'], $user->password)) {
            return response([
                'status' => false,
                'message' => 'Login failed'
            ], 401);
        }else{
            
            // ลบ token เก่าออกแล้วค่อยสร้างใหม่
            $user->tokens()->delete();

            // Create token
            $token = $user->createToken($request->userAgent(), ["$user->role"])->plainTextToken;
    
            $response = [
                'status' => true,
                'message' => 'Login successfully',
                'user' => $user,
                'token' => $token
            ];
    
            return response($response, 201);
        }

    }

    // Refresh Token
    public function refreshToken(Request $request) {
        $user = $request->user();
        $user->tokens()->delete();
        $token = $user->createToken($request->userAgent(), ["$user->role"])->plainTextToken;
        $response = [
            'status' => true,
            'message' => 'Token refreshed',
            'user' => $user,
            'token' => $token
        ];
        return response($response, 201);
    }

    // Logout User
    public function logout(Request $request){
        auth()->user()->tokens()->delete();
        return [
            'status' => true,
            'message' => 'Logged out'
        ];
    }
}

Step 14: แก้ไขไฟล์ src\routes\api.php เพิ่ม routes
</>

<?php

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Route;
use App\Http\Controllers\AuthController;

// Route for register and login
Route::post('register',[AuthController::class, 'register']);
Route::post('login',[AuthController::class, 'login']);

Route::group(['middleware' => 'auth:sanctum'], function(){
    Route::post('refreshtoken', [AuthController::class, 'refreshToken']);
    Route::post('logout',[AuthController::class, 'logout']);
});

Step 15: ทดสอบ Register และ Login/Logout API
</>

การ register
---
http://localhost:8000/api/register
Method: POST
PayLoad
{
    "fullname":"John Doe",
    "username":"john",
    "email":"john@email.com",
    "password":"12345678",
    "password_confirmation":"12345678",
    "tel":"0881235678",
    "role":"1"
}

ผลลัพธ์ที่ควรได้กลับมา
---
{
  "status": true,
  "message": "User registered successfully",
  "user": {
    "fullname": "John Doe",
    "username": "john",
    "email": "john@email.com",
    "tel": "0881235678",
    "role": "1",
    "updated_at": "2024-05-24T11:28:09.000000Z",
    "created_at": "2024-05-24T11:28:09.000000Z",
    "id": 1
  }
}

การ login
---
http://localhost:8000/api/login

{
    "email":"john@email.com",
    "password":"12345678"
}

ผลลัพธ์ที่ควรได้กลับมา
---
{
  "status": true,
  "message": "Login successfully",
  "user": {
    "id": 1,
    "fullname": "John Doe",
    "username": "john",
    "email": "john@email.com",
    "email_verified_at": null,
    "tel": "0881235678",
    "avatar": null,
    "role": 1,
    "created_at": "2024-05-24T11:28:09.000000Z",
    "updated_at": "2024-05-24T11:28:09.000000Z"
  },
  "token": "2|PMZLAaTCBgvIBkxVK7y3ZcxLHpqk9rETmQmoWUVle5e2e9c7"
}

Step 16: แก้ไข Product Controller ที่ไฟล์ app/Http/Controllers/ProductController.php

<?php

namespace App\Http\Controllers;

use App\Models\Product;
use Illuminate\Http\Request;

class ProductController extends Controller
{
    // อ่านรายการสินค้าทั้งหมด
    public function index()
    {
        // Read all products
        return Product::all();
    }

    /**
     * Store a newly created resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @return \Illuminate\Http\Response
     */
    public function store(Request $request)
    {
        // เช็คสิทธิ์ (role) ว่าเป็น admin (1) 
        $user = auth()->user();

        if ($user->tokenCan("1")) {

            // Validate form
            $request->validate([
                'name' => 'required|min:3',
                'slug' => 'required',
                'price' => 'required'
            ]);

            // กำหนดตัวแปรรับค่าจากฟอร์ม
            $data_product = array(
                'name' => $request->input('name'),
                'description' => $request->input('description'),
                'slug' => $request->input('slug'),
                'price' => $request->input('price'),
                'user_id' => $user->id
            );

            // Create data to tabale product
            $product = Product::create($data_product);

            $response = [
                'status' => true,
                'message' => "Product created successfully",
                'product' => $product,
            ];

            return response($response, 201);

        } else {
            return response([
                'status' => false,
                'message' => 'Permission denied to create'
            ], 401);
        }
    }

    /**
     * Display the specified resource.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function show($id)
    {
        $product = Product::find($id);

        if ($product) {
            return response([
                'status' => true,
                'product' => $product
            ]);
        } else {
            return response([
                'status' => false,
                'message' => 'Product not found'
            ], 404);
        }
    }

    /**
     * Update the specified resource in storage.
     *
     * @param  \Illuminate\Http\Request  $request
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function update(Request $request, $id)
    {
        // เช็คสิทธิ์ (role) ว่าเป็น admin (1) 
        $user = auth()->user();

        if ($user->tokenCan("1")) {

            $request->validate([
                'name' => 'required',
                'slug' => 'required',
                'price' => 'required'
            ]);

            $data_product = array(
                'name' => $request->input('name'),
                'description' => $request->input('description'),
                'slug' => $request->input('slug'),
                'price' => $request->input('price'),
                'user_id' => $user->id
            );

            $product = Product::find($id);
            $product->update($data_product);

            return response([
                'status' => true,
                'message' => 'Product updated successfully',
                'product' => $product
            ]);

        } else {
            return response([
                'status' => false,
                'message' => 'Permission denied to create'
            ], 401);
        }
    }

    /**
     * Remove the specified resource from storage.
     *
     * @param  int $id
     * @return \Illuminate\Http\Response
     */
    public function destroy($id)
    {

        // เช็คสิทธิ์ (role) ว่าเป็น admin (1) 
        $user = auth()->user();

        if ($user->tokenCan("1")) {

            $product = Product::destroy($id);

            if ($product) {
                return response([
                    'status' => true,
                    'message' => 'Product deleted successfully'
                ]);
            } else {
                return response([
                    'status' => false,
                    'message' => 'Product not found'
                ], 404);
            }
            
        } else {
            return response([
                'status' => false,
                'message' => 'Permission denied to create'
            ], 401);
        }

    }
}

Step 17: แก้ไขไฟล์ src\routes\api.php เพิ่ม routes
</>
<?php

use Illuminate\Support\Facades\Route;
use App\Http\Controllers\AuthController;
use App\Http\Controllers\ProductController;

// Route for register and login
Route::post('register',[AuthController::class, 'register']);
Route::post('login',[AuthController::class, 'login']);

Route::group(['middleware' => 'auth:sanctum'], function(){
    Route::post('refreshtoken', [AuthController::class, 'refreshToken']);
    Route::post('logout',[AuthController::class, 'logout']);
    Route::resource('products', ProductController::class);
});


Step 18: ทดสอบเรียกใช้ product api
</>

http://localhost:8000/api/products

Auth Bearer
--
6|FJqk9koWF45l9HyBpSMDcqMAJVpB66k4stuSWWy871b75c9e

ผลลัพธ์ที่ควรได้กลับมา
---
Status: 200 OK
[]

Step 19: ทดสอบเพิ่มข้อมูลใน API products
---
http://localhost:8000/api/products

Auth Bearer
--
Bearer 2|quRW74msH7dPP48SAD4rnuPEZ8bNN5suZf9XXHnH

HTTP Method: POST

Body:
{
    "name": "iPhone 12 Pro Max",
    "slug": "iphone-12-pro-max",
    "price": "38500.00",
    "category_id": "1",
    "description": "iPhone 12 Pro Max detail"
}

ผลลัพธ์ที่ควรได้กลับมา
---
Status: 201 OK

{
  "status": true,
  "message": "Product created successfully",
  "product": {
    "name": "iPhone 13 Pro Max",
    "description": "iPhone 13 Pro Max detail",
    "slug": "iphone-13-pro-max",
    "price": "48500.00",
    "user_id": 1,
    "updated_at": "2024-05-24T11:55:38.000000Z",
    "created_at": "2024-05-24T11:55:38.000000Z",
    "id": 2
  }
}

Step 20: ทดสอบเรียก API products สำหรับการแก้ไข
---

http://localhost:8000/api/products/1

Auth Bearer
--
Bearer 2|quRW74msH7dPP48SAD4rnuPEZ8bNN5suZf9XXHnH

HTTP Method: PUT

Body:
{
    "name": "iPad Pro 2024",
    "slug": "ipad-pro-2024",
    "description": "iPad Pro 2024 detail",
    "price": "45000.00"
}

Step 21: ทดสอบเรียก API products สำหรับการลบ
---

http://localhost:8100/api/products/1

Auth Bearer
--
Bearer 2|quRW74msH7dPP48SAD4rnuPEZ8bNN5suZf9XXHnH

HTTP Method: DELETE

Step 22: การติดตั้ง Document API (Swagger)
---
Install Swagger
---
💻 composer require darkaonline/l5-swagger

Publish Config File
---
💻 php artisan vendor:publish --provider "L5Swagger\L5SwaggerServiceProvider"

Generate Swagger Document
---
💻 php artisan l5-swagger:generate

Example annotations
---
/**
 * @OA\Info(
 *    title="Your super  ApplicationAPI",
 *    version="1.0.0",
 * )
 */

# REGISTER API #

/**
* @OA\Post(
* path="/api/register",
* operationId="Register",
* tags={"Register"},
* summary="User Register",
* description="User Register here",
*     @OA\RequestBody(
*         @OA\JsonContent(),
*         @OA\MediaType(
*            mediaType="multipart/form-data",
*            @OA\Schema(
*               type="object",
*               required={"name","email", "password", "password_confirmation"},
*               @OA\Property(property="name", type="text"),
*               @OA\Property(property="email", type="text"),
*               @OA\Property(property="password", type="password"),
*               @OA\Property(property="password_confirmation", type="password")
*            ),
*        ),
*    ),
*      @OA\Response(
*          response=201,
*          description="Register Successfully",
*          @OA\JsonContent()
*       ),
*      @OA\Response(
*          response=200,
*          description="Register Successfully",
*          @OA\JsonContent()
*       ),
*      @OA\Response(
*          response=422,
*          description="Unprocessable Entity",
*          @OA\JsonContent()
*       ),
*      @OA\Response(response=400, description="Bad request"),
*      @OA\Response(response=404, description="Resource Not Found"),
* )
*/

# LOGIN API #

/**
* @OA\Post(
*     path="/api/login",
*     operationId="Login",
*     tags={"Login"},
*     summary="User Login",
*     description="User Login here",
*     @OA\RequestBody(
*         required=true,
*         @OA\MediaType(
*            mediaType="multipart/form-data",
*            @OA\Schema(
*               type="object",
*               required={"email", "password"},
*               @OA\Property(property="email", type="string", example="sanjay@gmail.com"),
*               @OA\Property(property="password", type="string", example="123456"),
*            ),
*        ),
*        @OA\MediaType(
*            mediaType="application/json",
*            @OA\Schema(
*               type="object",
*               required={"email", "password"},
*               @OA\Property(property="email", type="string", example="sanjay@gmail.com"),
*               @OA\Property(property="password", type="string", example="123456"),
*            ),
*        ),
*    ),
*    @OA\Response(
*        response=201,
*        description="Login Successfully",
*        @OA\JsonContent()
*    ),
*    @OA\Response(
*        response=200,
*        description="Login Successfully",
*        @OA\JsonContent()
*    ),
*    @OA\Response(
*        response=422,
*        description="Unprocessable Entity",
*        @OA\JsonContent()
*    ),
*    @OA\Response(response=400, description="Bad request"),
*    @OA\Response(response=404, description="Resource Not Found"),
* )
*/

Step 23: ทดสอบเรียกใช้ Document API (Swagger)
---
http://localhost:8000/api/documentation

Step 24: Clone Project from Github
---
💻 git clone https://github.com/iamsamitdev/laravel11-store-api-finished laravel-store-api-app

Step 25: ติดตั้ง Composer
---
💻 composer install

Step 26: สร้าง .env จาก .env.example
---
💻 cp .env.example .env

Step 27: สร้าง Key สำหรับ Laravel
---
💻 php artisan key:generate

Step 28: ทำการ Migrate ฐานข้อมูล
---
💻 php artisan migrate

Step 29: ทำการ Seed ข้อมูล
---
💻 php artisan db:seed

Step 30: ทดสอบรันโปรเจ็กต์
---
💻 php artisan serve

🚀 4.Deploy Laravel Project to cloud

Step 31: ติดตั้ง vercel cli
---
💻 npm i -g vercel@latest

Step 32: เช็ค vercel cli
---
💻 vercel --version

Step 33: ล็อกอิน vercel

แก้ไฟล์ l5-swagger.php
---
'use_absolute_path' => env('L5_SWAGGER_USE_ABSOLUTE_PATH', false),

แก้ไฟล์ AppServiceProvider.php
---
use Illuminate\Support\Facades\URL;
public function boot(): void
    {
        if($this->app->environment('production')) {
            URL::forceScheme('https');
        }
    }

แก้ไขไฟล์ .htaccess
---
# Send Requests To API Front Controller...
    RewriteRule ^api/.*$ /api/index.php [L]

-------------------------------------------------------
⚡ DAY 3
1.What new in Vue 3
2.Setup Vue 3 Project
3.Vue 3 Composition API
4.Consuming REST API in Vue 3
-------------------------------------------------------
🚀 1.What new in Vue 3

🚀 2.Setup Vue 3 Project

Step 1: Install Vite in Global
---
💻 npm install -g vite

Step 2: Create new Vite Project with Vue
---
💻 npm create vite@latest
or
💻 yarn create vite

กำหนดชื่อโปรเจ็กต์เป็น "vue-stock-app"

Step 3: เปิดโปรเจ็กต์เข้า VS Code
---
code vue-stock-app -r

Step 4: Install node module in Vite Project
---
💻 npm install

Step 5: Run Project Vite with Vue
---
💻 npm run dev

or Run with host Project Vite with Vue
---
💻 npm run dev --  --host

Step 6: Install Tailwind CSS 3
---
💻 npm install -D tailwindcss postcss autoprefixer

Step 7: Generate Config Tailwind and PostCSS file
---
💻 npx tailwindcss init -p

Step 8: Config tailwind template paths
---
content: [
    "./index.html",
    "./src/**/*.{vue,js,ts,jsx,tsx}",
],

Step 9: Add Tailwind direactives to your CSS
Create src/tailwind/app.css
---
@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Sans+Thai:wght@300;400;500&display=swap');

@tailwind base;
@tailwind components;
@tailwind utilities;

Step 10: Import tailwind css in main.ts
---
// Tailwind CSS
import './tailwind/app.css'
import './style.css'

ทดสอบใช้ Tailwind ที่ไฟล์ App.vue

<script setup lang="ts">

</script>

<template>

  <div class="flex justify-center items-center h-screen">
    <h1 class="text-4xl text-green-600 font-bold text-center animate-pulse">Hello Vue 3 + Vite + Tailwind CSS</h1>
  </div>
  
</template>

<style scoped>

</style>

Step 11: Install Vue Router
---
💻 npm install vue-router@4

Step 12: Vite Config path file to src
---
import { fileURLToPath, URL } from 'node:url'

import { defineConfig } from 'vite'
import vue from '@vitejs/plugin-vue'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [vue()],
  resolve: {
    alias: {
      '@': fileURLToPath(new URL('./src', import.meta.url))
    }
  }
})

Step 13: install @types/node
---
💻 npm install -D @types/node

Step 14: สร้าง component ส่วน frontend "Foot.vue" , "Nav.vue"
---
Nav.vue
---
<script setup lang="ts">

</script>

<template>
    <div>
        <h1>MENU</h1>
    </div>
</template>

<style scoped>

</style>

Foot.vue
---
<script setup lang="ts">

</script>

<template>
    <div>
        <h1>Footer</h1>
    </div>
</template>

<style scoped>

</style>

Step 15: สร้าง FrontendLayout.vue ไว้ใน folder "layouts"
---
<script setup lang="ts">

    import Nav from '@/components/frontend/Nav.vue'
    import Foot from '@/components/frontend/Foot.vue'

</script>

<template>
    <div>
        <Nav />
        <main>
            <router-view />
        </main>
        <Foot />
    </div>
</template>


<style scoped>

</style>

Step 16: สร้าง router ชื่อไฟล์ index.vue ไว้ในโฟลเดอร์ src/router/index.ts
---
import { createRouter, createWebHistory, RouteRecordRaw } from "vue-router"
import FrontendLayout from "@/layouts/FrontendLayout.vue"
import Home from "@/views/frontend/Home.vue"

const routes: Array<RouteRecordRaw> = [
  // Frontend Route
  {
    // เรียกตัว Frontend Layout (แม่)
    path: "/",
    name: "Frontend",
    component: FrontendLayout,

    // เรียกตัวลูกมาใส่
    children: [
      {
        path: "",
        name: "Home",
        component: Home,
        meta: {
          title: "Home",
        },
      },
    ],
  },
]

const router = createRouter({
  history: createWebHistory(import.meta.env.URL),
  routes,
})

export default router

Step 17: แก้ไขไฟล์ main.ts
---
import { createApp } from 'vue'
import router from './router/index'
import App from './App.vue'

// Tailwind CSS
import './tailwind/app.css'
import './style.css'

const app = createApp(App)
app.use(router)
app.mount('#app')

Step 18: แก้ไขไฟล์ App.vue
---
<script setup lang="ts">

</script>

<template>
  <RouterView />
</template>

<style scoped>

</style>


โครงสร้างโปรเจ็กต์ vue-stock-app
===============================
vue-stock-app
+---.vscode
+---public
|       
\---src
    |   App.vue
    |   main.ts
    |   vite-env.d.ts
    +---assets  
    +---components
    |   +---backend
    |   \---frontend
    |          Foot.vue
    |          Nav.vue
    +---layouts
    |       FrontendLayout.vue
    +---router
    |       index.ts
    +---tailwind
    |       app.css
    |       custom.css
    \---views
        +---backend
        \---frontend
                About.vue          
                Contact.vue       
                ForgotPassword.vue       
                Home.vue       
                Login.vue      
	Portfolio.vue
	Register.vue
	Service.vue
|   .env
|   .env.development
|   .env.production
|   .eslintrc.json
|   .gitignore
|   .prettierrc
|   index.html
|   package-lock.json
|   package.json
|   postcss.config.cjs
|   README.md
|   tailwind.config.cjs
|   tree.txt
|   tsconfig.json
|   tsconfig.node.json
|   vite.config.ts